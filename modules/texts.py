from auxiliary import printc

def print_blox(title="MENU"):
		printc("green","############################################################")
		printc("green","#                                                          #")
		printc("green","#              Trabalho de Cálculo Numérico.               #")
		printc("green","#                  Equipe やめてお姉ちゃん                 #")
		printc("green","#                                                          #")
		printc("green","############################################################")
		printc("yellow","                 ~~~~~~~~ "+title+" ~~~~~~~~")
		print("")

def instructions():
	printc("white","##########################################################################")
	printc("white","#                                                                        #")
	printc("white","# Instruções:                                                            #")
	printc("white","#                                                                        #")
	printc("white","# -> Inserção de dados customizados:                                     #")
	printc("white","#    Para inserir os dados dos sistemas que deseja criar, basta abrir    #")
	printc("white","#    ou criar um arquivo de texto na pasta \"data\" (não é recomendado     #")
	printc("white","#    modificar o arquivo \"standard.txt\") e editá-lo conforme os mode-    #")
	printc("white","#    los encontrados na pasta. As matrizes A's inseridas devem ser nxn.  #")
	printc("white","#    É importante ressaltar que os vetores b\'s são inseridos como a      #")
	printc("white","#    última coluna das matrizes A's. Quanto à precisão, esta é defini-   #")
	printc("white","#    da na resolução.                                                    #")
	printc("white","#                                                                        #")
	printc("white","##########################################################################")
	print("")

def credit():
	printc("white","#########################################################################")
	printc("white","#                                                                       #")
	printc("white","#                 UECE - Universidade Estadual do Ceará                 #")
	printc("white","#                                                                       #")
	printc("white","#                                Docente:                               #")
	printc("white","#                     Suzana Matos Franca de Oliveira                   #")
	printc("white","#                                                                       #")
	printc("white","#                               Discentes:                              #")
	printc("white","#         Alan Pereira de Vasconcelos Junior (Coding + Interface)       #")
	printc("white","#                  Camila Alves Barbosa (Coding + Frontend)             #")
	printc("white","#               Gabriel Furtado Lins Melo (Coding + Math)               #")
	printc("white","#            Hianuy Esperidiao de Sousa Pinto (Coding + Debug)          #")
	printc("white","#             (líder) Vinicius Amaro Sampaio (Coding + Backend)         #")
	printc("white","#                                                                       #")
	printc("white","#                      Linguagem de Desenvolvimento:                    #")
	printc("white","#                              Python 3.4.3                             #")
	printc("white","#                                                                       #")
	printc("white","#########################################################################")
	print("")

def problemAnalysis():
	printc("white","##########################################################################")
	printc("white","#                                                                        #")
	printc("white","# Enunciado:                                                             #")
	printc("white","# Uma pequena ponte está sendo analisada para que uma carga muito pesada #")
	printc("white","# passe por ela. Existem alguns pontos amostrais, calculados pelo siste- #")
	printc("white","# ma linear S1, em que a pressão pode ser descoberta pelo sistema linear #")
	printc("white","# S2. O ponto mais frágil da ponte se encontra na média dos pontos amos- #")
	printc("white","# trais.                                                                 #")
	printc("white","#                                                                        #")
	printc("white","# Análise do problema:                                                   #")
	printc("white","# As posições dos pontos amostrais da ponte são obtidas através da reso- #")
	printc("white","# lução do sistema S1, com o método da eliminação de Gauss, e suas res-  #")
	printc("white","# pectivas pressões são calculadas pelo sistema S2, o qual é resolvido   #")
	printc("white","# com o método de Gauss-Jacobi e sua convergência é verificada, basean-  #")
	printc("white","# do-se na precisão fornecida e no número de iterações. O sistema S2 é   #")
	printc("white","# submetido a uma intepolação quadrática, utilizando a forma de Newton,  #")
	printc("white","# para calcular a pressão no ponto mais frágil da ponte, com sua posição #")
	printc("white","# dada pela média dos pontos calculados em S1.                           #")
	printc("white","#                                                                        #")
	printc("white","##########################################################################")
	print("")

def colorAdjust():
	string = "Fzytwnf%ij\x0fFqfs%Ujwjnwf%ij%[fxhtshjqtx%Ozsntw%\x0fHfrnqf%Fq{jx%Gfwgtxf\x0fLfgwnjq%Kzwyfit%Qnsx%Rjqt\x0fMnfsz~%Jxujwninft%ij%Xtzxf%Unsyt\x0f[nsnhnzx%Frfwt%Xfrufnt"
	return string